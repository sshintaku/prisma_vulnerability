package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"
	"regexp"
	"strconv"
	"time"

	CloudType "github.com/sshintaku/cloud_types"
	"github.com/sshintaku/web_requests"
)

var token, computeBaseUrl string

func main() {
	username := os.Getenv("APIKEY")
	password := os.Getenv("PASSWORD")
	authResponse, _ := web_requests.GetJWTToken("https://api2.prismacloud.io/login", username, password)
	token = authResponse.Token

	computeUrl, baseUrlError := web_requests.GetComputeBaseUrl(token)
	computeBaseUrl = computeUrl
	if baseUrlError != nil {
		log.Fatal(baseUrlError)
	}
	result := GetDeployedImages()
	maintainerList := GetMaintainerList(result)
	GenerateSummary(maintainerList, result)

}

func getRuntimeProfiles() {
	uri := computeBaseUrl + "/api/v1/profiles/host"
	results, resultError := web_requests.GetMethod(uri, token)
	if resultError != nil {
		log.Fatal(resultError)
	}
	s := string(results)
	fmt.Println(s)
}

func GetDeployedImages() []CloudType.ComplianceObject {
	flag := true
	offsetValue := 0
	var jsonObject []CloudType.ComplianceObject
	var complianceList []CloudType.ComplianceObject
	//var complianceList []ComplianceObject
	for flag {
		uri := computeBaseUrl + "/api/v1/images?limit=50&offset=" + strconv.Itoa(offsetValue)
		results, resultError := web_requests.GetMethod(uri, token)
		if resultError != nil {
			log.Fatal(resultError)
		}
		if string(results) == "null" {
			flag = false
		} else {
			json.Unmarshal(results, &jsonObject)
			offsetValue = offsetValue + 50
			complianceList = append(complianceList, jsonObject...)
		}
	}
	return complianceList

}

func GenerateSummary(maintainerList []string, data []CloudType.ComplianceObject) {

	fmt.Println("MAINTAINER, PACKAGENAME, PACKAGE_VERSION, TYPE, CRITICAL, HIGH, IMPORTANT, MODERATE,MEDIUM, LOW, CLUSTERNAME, REGISTRY, REPOSITORY, FIXDATE, CVE, CVSS, LINK, DESCRIPTION")
	for _, maintainer := range maintainerList {
		var overallComplianceCounter CloudType.AlarmCounter
		if maintainer == "" {
			fmt.Println("\n\n" + "maintainer: none")
		} else {
			fmt.Println("\n\n" + maintainer)
		}
		complianceList := FindMaintainerObjects(maintainer, data)
		vulnerabilityPackageList, compliancePackageList := GetPackageList(complianceList)
		for _, vulnerabilityPackage := range vulnerabilityPackageList {
			var summary CloudType.MaintainerSummary
			for _, item := range complianceList {
				for _, vulnerabilityItem := range item.VulnerabilityIssues {

					if vulnerabilityItem.PackageName == vulnerabilityPackage {
						if summary.ClusterName == nil {
							summary.ClusterName = item.Clusters
							summary.Registry = item.RepoTags.Registry
							summary.Repository = item.RepoTags.Repo
							summary.Package = vulnerabilityItem.PackageName
							summary.PackageType = vulnerabilityItem.PackageVersion
							summary.Type = vulnerabilityItem.Type
							myDate := time.Unix(vulnerabilityItem.FixDate, 0)

							summary.FixDate = myDate.Format(time.UnixDate)
							summary.CVSS = vulnerabilityItem.CVSS
							summary.CVE = vulnerabilityItem.CVE
							summary.Link = vulnerabilityItem.Link
							summary.Description = vulnerabilityItem.Description
						}
						switch vulnerabilityItem.Severity {
						case "critical":
							summary.VulnerabilitySummary.Critical = summary.VulnerabilitySummary.Critical + 1
							overallComplianceCounter.Critical += 1
							break
						case "high":
							summary.VulnerabilitySummary.High = summary.VulnerabilitySummary.High + 1
							overallComplianceCounter.High += 1
							break
						case "important":
							summary.VulnerabilitySummary.Important = summary.VulnerabilitySummary.Important + 1
							overallComplianceCounter.Important += 1
							break
						case "medium":
							summary.VulnerabilitySummary.Medium = summary.VulnerabilitySummary.Medium + 1
							overallComplianceCounter.Medium += 1
							break
						case "moderate":
							summary.VulnerabilitySummary.Moderate = summary.VulnerabilitySummary.Moderate + 1
							overallComplianceCounter.Moderate += 1
							break
						case "low":
							summary.VulnerabilitySummary.Low = summary.VulnerabilitySummary.Low + 1
							overallComplianceCounter.Low += 1
							break
						}

					}
				}

			}
			report := "VULNERABILITY," + summary.Package + "," + summary.PackageType + "," + summary.Type + "," + strconv.Itoa(summary.VulnerabilitySummary.Critical) + "," + strconv.Itoa(summary.VulnerabilitySummary.High) + "," + strconv.Itoa(summary.VulnerabilitySummary.Important) + "," + strconv.Itoa(summary.VulnerabilitySummary.Moderate) + "," + strconv.Itoa(summary.VulnerabilitySummary.Medium) + "," + strconv.Itoa(summary.VulnerabilitySummary.Low)
			clusterName := "\""
			index := 0
			for _, node := range summary.ClusterName {
				if index != 0 {
					clusterName = clusterName + ","
				}
				clusterName = clusterName + node
				index = index + 1
			}

			report = report + "," + clusterName + "\"," + summary.Registry + "," + summary.Repository + "," + summary.FixDate + "," + summary.CVE + "," + fmt.Sprintf("%f", summary.CVSS) + "," + summary.Link + ",\"" + summary.Description + "\""
			fmt.Println(report)

		}
		for _, compliancePackage := range compliancePackageList {
			var summary CloudType.MaintainerSummary

			for _, item := range complianceList {
				for _, complianceItem := range item.ComplianceIssues {
					if complianceItem.PackageName == compliancePackage {
						if summary.ClusterName == nil {
							summary.ClusterName = item.Clusters
							summary.Registry = item.RepoTags.Registry
							summary.Repository = item.RepoTags.Repo
							summary.Package = complianceItem.PackageName
							summary.PackageType = complianceItem.PackageVersion
							summary.Title = complianceItem.Title
							summary.Description = complianceItem.Description
							summary.Cause = complianceItem.Cause
							myDate := time.Unix(complianceItem.FixDate, 0)

							summary.FixDate = myDate.Format(time.UnixDate)
						}
						switch complianceItem.Severity {
						case "critical":
							summary.ComplianceSummary.Critical = summary.ComplianceSummary.Critical + 1
							overallComplianceCounter.Critical += 1
							break
						case "high":
							summary.ComplianceSummary.High = summary.ComplianceSummary.High + 1
							overallComplianceCounter.High += 1
							break
						case "important":
							summary.ComplianceSummary.Important = summary.ComplianceSummary.Important + 1
							overallComplianceCounter.Important += 1
							break
						case "medium":
							summary.ComplianceSummary.Medium = summary.ComplianceSummary.Medium + 1
							overallComplianceCounter.Medium += 1
							break
						case "moderate":
							summary.ComplianceSummary.Moderate = summary.ComplianceSummary.Moderate + 1
							overallComplianceCounter.Moderate += 1
							break
						case "low":
							summary.ComplianceSummary.Low = summary.ComplianceSummary.Low + 1
							overallComplianceCounter.Low += 1
							break
						}
					}
				}

			}
			report := "COMPLIANCE," + summary.Package + "," + summary.PackageType + ",," + strconv.Itoa(summary.ComplianceSummary.Critical) + "," + strconv.Itoa(summary.ComplianceSummary.High) + "," + strconv.Itoa(summary.ComplianceSummary.Important) + "," + strconv.Itoa(summary.ComplianceSummary.Moderate) + "," + strconv.Itoa(summary.ComplianceSummary.Medium) + "," + strconv.Itoa(summary.ComplianceSummary.Low)
			clusterName := "\""
			index := 0
			for _, node := range summary.ClusterName {
				if index != 0 {
					clusterName = clusterName + ","
				}
				clusterName = clusterName + node
				index = index + 1
			}
			report = report + "," + clusterName + "\"," + "," + summary.Registry + "," + summary.Repository + "," + summary.FixDate + ",Description: " + summary.Description + " Cause: " + summary.Cause + " Title: " + summary.Title
			fmt.Println(report)
		}
		fmt.Println("Alarm Totals,,,," + strconv.Itoa(overallComplianceCounter.Critical) + "," + strconv.Itoa(overallComplianceCounter.High) + "," + strconv.Itoa(overallComplianceCounter.Important) + "," + strconv.Itoa(overallComplianceCounter.Moderate) + "," + strconv.Itoa(overallComplianceCounter.Medium) + "," + strconv.Itoa(overallComplianceCounter.Low))

	}
}

func GetPackageList(data []CloudType.ComplianceObject) ([]string, []string) {
	var compliancePackageList []string
	var vulnerabilityPackageList []string
	for _, packageData := range data {
		for _, issue := range packageData.VulnerabilityIssues {

			if !Find(vulnerabilityPackageList, issue.PackageName) {
				vulnerabilityPackageList = append(vulnerabilityPackageList, issue.PackageName)
			}
		}
	}

	for _, packageData := range data {
		for _, issue := range packageData.ComplianceIssues {
			if !Find(compliancePackageList, issue.PackageName) {
				compliancePackageList = append(compliancePackageList, issue.PackageName)
			}
		}
	}
	return vulnerabilityPackageList, compliancePackageList
}

func GetMaintainerList(listToProcess []CloudType.ComplianceObject) []string {
	var maintainerList []string
	for _, item := range listToProcess {
		for _, label := range item.Labels {
			match, _ := regexp.MatchString("^maintainer:", label)
			if match {
				if !Find(maintainerList, label) {
					maintainerList = append(maintainerList, label)
				}
			}
		}
	}
	nullMaintainer := ""
	maintainerList = append(maintainerList, nullMaintainer)
	return maintainerList
}

func Find(slice []string, val string) bool {
	for _, item := range slice {
		if item == val {
			return true
		}
	}
	return false
}

func FindMaintainerObjects(maintainer string, data []CloudType.ComplianceObject) []CloudType.ComplianceObject {
	var list []CloudType.ComplianceObject
	for _, item := range data {
		if maintainer == "" {
			flag := false
			for _, label := range item.Labels {
				result, _ := regexp.MatchString("^maintainer:", label)
				if result {
					flag = true
				}
			}
			if !flag {
				list = append(list, item)
			}
		} else {
			if Find(item.Labels, maintainer) {
				list = append(list, item)
			}
		}
	}
	return list
}
