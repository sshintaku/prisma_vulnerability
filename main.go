package main

import (
	"encoding/json"
	"fmt"
	"log"
	"os"

	"github.com/sshintaku/web_requests"
)

var token, computeBaseUrl string

func main() {
	username := os.Getenv("APIKEY")
	password := os.Getenv("PASSWORD")
	authResponse, _ := web_requests.GetJWTToken("https://api2.prismacloud.io/login", username, password)
	token = authResponse.Token
	computeUrl, baseUrlError := web_requests.GetComputeBaseUrl(token)
	computeBaseUrl = computeUrl
	if baseUrlError != nil {
		log.Fatal(baseUrlError)
	}
	//getImageScanResulst()
	getDeployedImages()
}

func getImageScanResulst() {
	uri := computeBaseUrl + "/api/v1/registry"
	results, resultError := web_requests.GetMethod(uri, token)
	if resultError != nil {
		log.Fatal(resultError)
	}
	var output []scanResult
	json.Unmarshal(results, &output)

	fmt.Println(output)
}

func getDeployedImages() {
	uri := computeBaseUrl + "/api/v1/images/download"
	results, resultError := web_requests.GetMethod(uri, token)
	if resultError != nil {
		log.Fatal(resultError)
	}
	s := string(results)
	fmt.Println(s)
}

type scanResult struct {
	Id              string           `json:"_id"`
	Collections     []string         `json:"collections"`
	AllCompliance   ComplianceIssues `json:"allCompliance"`
	Vulnerabilities []Vulnerability  `json:"vulnerabilities"`
}

type ComplianceIssues struct {
	Compliance []ComplianceAttributes `json:"compliance"`
}

type ComplianceAttributes struct {
	Id          int    `json:"id"`
	Severity    string `json:"severity"`
	Description string `json:"description"`
	Title       string `json:"title"`
}

type Vulnerability struct {
	CVE             string   `json:"cve"`
	Exploit         []string `json:"exploit"`
	ApplicableRules []string `json:"applicableRules"`
	Description     string   `json:"description"`
	Block           bool     `json:"block"`
	Cause           string   `json:"cause"`
}
